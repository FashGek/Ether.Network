# Ether.Network NetServer

The `NetServer` class is the main class to use to build a server application.

`NetServer` will take care of all incoming connections and manage all connected clients.

First of all, you can not create an instance of a `NetServer`. If you look at the source, `NetServer` is a templated abstract class.

```c#
public abstract class NetServer<T> : IDisposable where T : NetConnection, new()
```

Why is it templated? 
We choose to create an templated abstract class to allow you to create any types of clients who inherits from the `NetConnection` class.

You cannot do:
```c#
var server = new NetServer<NetConnection>();
```
Because you cannot create an instance of an abstract class. So you will need to create a custom server class and inherit from `NetServer`

```c#
using Ether.Network;

// T should be a type inheriting from NetConnection
public class MyServer : NetServer<T> { ... }
```

Now that you have your `NetServer<T>` implementation, you will need to override some methods :

- `protected override void Initialize()`
	- This method is called just after the call of the `Start()` method. It allows you to load your resources.
- `protected override void Idle();`
	- This method is called when the `NetServer<T>` has been started and ready to accept client. You can do whatever you want in this method.
	- Usualy, we use this method to do an administrator prompt.
	- or just a `while (true);`
- `protected override void OnClientConnected(NetConnection connection);`
	- This method is called when a new user is connected.
	- You can use this method to print some logs.
- `protected override void OnClientDisconnected(NetConnetion connection);`
	- This method is called when an user has been disconnected.
	- You can use this method to print some logs.

You can also do a custom process on the data your recieve by overriding the `SplitPackets` method:

`protected override IReadOnlyCollection<NetPacketBase> SplitPackets(byte[] buffer)`

See [NetPacketBase][netpacketbase] and [NetPacket][netpacket]

At the end, your server should look like:

```c#
public class MyServer : NetServer<T>
{
	public MyServer() : base()
	{
		// ...
	}

	protected override void OnClientConnected(NetConnection connection)
	{
		// ...
	}
	
	protected override void OnClientDisconected(NetConnection connection)
	{
		// ...
	}

	protected override void Initialize()
	{
		// ...
	}

	protected override void Idle()
	{
		while (true)
		{
			// ...
		}
	}

	protected override IReadOnlyCollection<NetPacketBase> SplitPackets(byte[] buffer)
	{
		var packets = new List<NetPacketBase>();
		// Do custom treatment to the buffer
		return packets;
	}
}
```

Then you can start your server:

```c#
private static void Main(string[] params)
{
	using (var server = new MyServer()
		server.Start();
}
```

[netpacket]: NetPacket
[netpacketbase]: NetPacketBase